// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorldSubscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/subscriber/DataReader.hpp>
#include <fastdds/dds/subscriber/SampleInfo.hpp>
#include <fastdds/dds/subscriber/Subscriber.hpp>
#include <fastdds/dds/subscriber/qos/DataReaderQos.hpp>

#include "HelloWorldPubSubTypes.h"
#include "HelloWorldSubscriber.h"
#include "glog/logging.h"

using namespace eprosima::fastdds::dds;

HelloWorldSubscriber::HelloWorldSubscriber()
    : participant_(nullptr),
      subscriber_(nullptr),
      topic_(nullptr),
      reader_(nullptr),
      type_(new HelloWorldPubSubType()) {}

HelloWorldSubscriber::~HelloWorldSubscriber() {
  if (reader_ != nullptr) {
    subscriber_->delete_datareader(reader_);
  }
  if (topic_ != nullptr) {
    participant_->delete_topic(topic_);
  }
  if (subscriber_ != nullptr) {
    participant_->delete_subscriber(subscriber_);
  }
  DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

bool HelloWorldSubscriber::init() {
  // CREATE THE PARTICIPANT
  DomainParticipantQos pqos;
  pqos.name("Participant_sub");
  participant_ =
      DomainParticipantFactory::get_instance()->create_participant(0, pqos);
  if (participant_ == nullptr) {
    return false;
  }

  // REGISTER THE TYPE
  type_.register_type(participant_);

  // CREATE THE SUBSCRIBER
  subscriber_ =
      participant_->create_subscriber(SUBSCRIBER_QOS_DEFAULT, nullptr);
  if (subscriber_ == nullptr) {
    return false;
  }

  // CREATE THE TOPIC
  topic_ = participant_->create_topic("HelloWorldTopic", "HelloWorld",
                                      TOPIC_QOS_DEFAULT);
  if (topic_ == nullptr) {
    return false;
  }

  // CREATE THE READER
  DataReaderQos rqos = DATAREADER_QOS_DEFAULT;
  rqos.reliability().kind = BEST_EFFORT_RELIABILITY_QOS;
  rqos.durability().kind = VOLATILE_DURABILITY_QOS;
  rqos.data_sharing().automatic();

  reader_ = subscriber_->create_datareader(topic_, rqos, &listener_);
  if (reader_ == nullptr) {
    return false;
  }

  return true;
}

void HelloWorldSubscriber::SubListener::on_subscription_matched(
    DataReader*, const SubscriptionMatchedStatus& info) {
  if (info.current_count_change == 1) {
    matched = info.total_count;
    LOG(INFO) << "Subscriber matched.";
  } else if (info.current_count_change == -1) {
    matched = info.total_count;
    LOG(WARNING) << "Subscriber unmatched.";
  } else {
    LOG(ERROR) << info.current_count_change
               << " is not a valid value for SubscriptionMatchedStatus current "
                  "count change";
  }
}

// void HelloWorldSubscriber::SubListener::on_data_available(
//         DataReader* reader)
// {
//     // Take data
//     HelloWorld st;
//     SampleInfo info;

//     if (reader->take_next_sample(&st, &info) == ReturnCode_t::RETCODE_OK)
//     {
//         if (info.valid_data)
//         {
//             // Print your structure data here.
//             ++samples;
//             std::cout << "Sample received, count=" << samples << std::endl;
//         }
//     }
// }

void HelloWorldSubscriber::SubListener::on_data_available(
    eprosima::fastdds::dds::DataReader* reader) {
  SampleInfo info;
  if (reader->take_next_sample(&hello_, &info) == ReturnCode_t::RETCODE_OK) {
    if (info.instance_state == ALIVE_INSTANCE_STATE) {
      samples++;
      LOG(INFO) << "Message " << hello_.message() << " " << hello_.index()
                << " RECEIVED";
    }
  }
}

void HelloWorldSubscriber::run() {
  std::cout << "Waiting for Data, press Enter to stop the DataReader. "
            << std::endl;
  std::cin.ignore();
  std::cout << "Shutting down the Subscriber." << std::endl;
}

void HelloWorldSubscriber::run(uint32_t number) {
  LOG(INFO) << "Subscriber running until " << number
            << "samples have been received";
  while (number > listener_.samples) {
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
  }
}
