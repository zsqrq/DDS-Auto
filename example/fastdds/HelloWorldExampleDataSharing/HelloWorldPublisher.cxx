// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorldPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#include "HelloWorldPublisher.h"
#include "HelloWorldPubSubTypes.h"
#include "glog/logging.h"

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>

#include <chrono>
#include <thread>

using namespace eprosima::fastdds::dds;

HelloWorldPublisher::HelloWorldPublisher()
    : participant_(nullptr),
      publisher_(nullptr),
      topic_(nullptr),
      writer_(nullptr),
      type_(new HelloWorldPubSubType()) {}

HelloWorldPublisher::~HelloWorldPublisher() {
  if (writer_ != nullptr) {
    publisher_->delete_datawriter(writer_);
  }
  if (publisher_ != nullptr) {
    participant_->delete_publisher(publisher_);
  }
  if (topic_ != nullptr) {
    participant_->delete_topic(topic_);
  }
  DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

bool HelloWorldPublisher::init() {
  /* Initialize data_ here */
  hello_.index(0);
  hello_.message("HelloWorld");

  // CREATE THE PARTICIPANT
  DomainParticipantQos pqos;
  pqos.name("Participant_pub");
  participant_ =
      DomainParticipantFactory::get_instance()->create_participant(0, pqos);
  if (participant_ == nullptr) {
    return false;
  }

  // REGISTER THE TYPE
  type_.register_type(participant_);

  // CREATE THE PUBLISHER
  publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT, nullptr);
  if (publisher_ == nullptr) {
    return false;
  }

  // CREATE THE TOPIC
  topic_ = participant_->create_topic("HelloWorldTopic", type_.get_type_name(),
                                      TOPIC_QOS_DEFAULT);
  if (topic_ == nullptr) {
    return false;
  }

  // CREATE THE WRITER
  DataWriterQos wqos = DATAWRITER_QOS_DEFAULT;
  wqos.reliability().kind = BEST_EFFORT_RELIABILITY_QOS;
  wqos.history().depth = 10;
  wqos.data_sharing().automatic();
  writer_ = publisher_->create_datawriter(topic_, wqos, &listener_);
  if (writer_ == nullptr) {
    return false;
  }

  LOG(INFO) << "HelloWorld DataWriter created.";
  return true;
}

void HelloWorldPublisher::PubListener::on_publication_matched(
    eprosima::fastdds::dds::DataWriter*,
    const eprosima::fastdds::dds::PublicationMatchedStatus& info) {
  if (info.current_count_change == 1) {
    matched_ = info.total_count;
    firstConnected_ = true;
    LOG(INFO) << "DataWriter matched.";
  } else if (info.current_count_change == -1) {
    matched_ = info.total_count;
    LOG(WARNING) << "DataWriter unmatched.";
  } else {
    LOG(ERROR) << info.current_count_change
               << " is not a valid value for PublicationMatchedStatus current "
                  "count change";
  }
}

void HelloWorldPublisher::runThread(uint32_t samples, uint32_t sleep) {
  if (samples == 0) {
    while (!stop_) {
      if (publish(false)) {
        LOG(INFO) << "Message: " << hello_.message()
                  << " with index: " << hello_.index() << " SENT";
      }
      std::this_thread::sleep_for(std::chrono::milliseconds(sleep));
    }
  } else {
    for (uint32_t i = 0; i < samples; ++i) {
      if (!publish()) {
        --i;
      } else {
        LOG(INFO) << "Message: " << hello_.message()
                  << " with index: " << hello_.index() << " SENT";
      }
      std::this_thread::sleep_for(std::chrono::milliseconds(sleep));
    }
  }
}

void HelloWorldPublisher::run(uint32_t samples, uint32_t sleep) {
  stop_ = false;
  std::thread thread(&HelloWorldPublisher::runThread, this, samples, sleep);

  if (samples == 0) {
    LOG(INFO) << "Publisher running. Please press enter to stop the "
                 "Publisher at any time.";
    std::cin.ignore();
    stop_ = true;
  } else {
    LOG(INFO) << "Publisher running " << samples << "samples .";
  }
  thread.join();
}

// void HelloWorldPublisher::run() {
//   std::cout << "HelloWorld DataWriter waiting for DataReaders." << std::endl;
//   while (listener_.matched_ == 0) {
//     std::this_thread::sleep_for(
//         std::chrono::milliseconds(250));  // Sleep 250 ms
//   }

//   // Publication code

//   HelloWorld st;

//   /* Initialize your structure here */

//   int msgsent = 0;
//   char ch = 'y';
//   do {
//     if (ch == 'y') {
//       writer_->write(&st);
//       ++msgsent;
//       std::cout << "Sending sample, count=" << msgsent
//                 << ", send another sample?(y-yes,n-stop): ";
//     } else if (ch == 'n') {
//       std::cout << "Stopping execution " << std::endl;
//       break;
//     } else {
//       std::cout << "Command " << ch << " not recognized, please enter
//       \"y/n\":";
//     }
//   } while (std::cin >> ch);
// }

bool HelloWorldPublisher::publish(bool waitForListener) {
  if (listener_.firstConnected_ || !waitForListener || listener_.matched_ > 0) {
    hello_.index(hello_.index() + 1);
    writer_->write(&hello_);
    return true;
  }
  return false;
}
