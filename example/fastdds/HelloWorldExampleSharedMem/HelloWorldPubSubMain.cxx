// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorldPubSubMain.cpp
 * This file acts as a main entry point to the application.
 *
 * This file was generated by the tool fastddsgen.
 */

#include "fastrtps/Domain.h"

#include "HelloWorldPublisher.h"
#include "HelloWorldSubscriber.h"

#include "glog/logging.h"

int main(int argc, char** argv) {
  FLAGS_alsologtostderr = 1;
  FLAGS_minloglevel = 0;
  google::InitGoogleLogging(argv[1]);
  std::cout << "Starting " << std::endl;
  int type = 1;
  int count = 1000;
  long sleep = 100;
  if (argc > 1) {
    if (strcmp(argv[1], "publisher") == 0) {
      type = 1;
      if (argc >= 3) {
        count = atoi(argv[2]);
        if (argc == 4) {
          sleep = atoi(argv[3]);
        }
      }
    } else if (strcmp(argv[1], "subscriber") == 0) {
      type = 2;
    } else if (strcmp(argv[1], "both") == 0) {
      type = 3;
    }
  } else {
    LOG(WARNING) << "publisher, subscriber or both argument needed"
                 << std::endl;
    //   Log::Reset();
    return 0;
  }

  switch (type) {
    case 1: {
      HelloWorldPublisher mypub;
      if (mypub.init()) {
        mypub.run(count, sleep);
      }
      break;
    }
    case 2: {
      HelloWorldSubscriber mysub;
      if (mysub.init()) {
        mysub.run();
      }
      break;
    }
    case 3: {
      std::thread thread_sub([] {
        HelloWorldSubscriber mysub;
        if (mysub.init()) {
          mysub.run();
        }
      });

      std::thread thread_pub([&] {
        HelloWorldPublisher mypub;
        if (mypub.init()) {
          mypub.run(count, sleep);
        }
      });

      thread_sub.join();
      thread_pub.join();

      break;
    }
  }
  eprosima::fastrtps::Domain::stopAll();
  // Log::Reset();

  return 0;
}
